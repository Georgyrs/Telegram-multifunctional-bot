import datetime
import os
import random
import sqlite3
import time
import requests
import telebot
import wikipedia
from bs4 import BeautifulSoup
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import config
bot = telebot.TeleBot(config.BOT_TOKEN)
wikipedia.set_lang(config.WIKIPEDIA_LANGUAGE)


def get_time():
    now = datetime.datetime.now()
    return now.strftime("%Y-%m-%d")


current_date = get_time()


def get_weather():
    url = config.WEATHER_URL
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")
    temperature_element = soup.find("span", {"class": "t_0"})
    temperature = temperature_element.text.strip() if temperature_element else "N/A"

    a = config.WEATHER_API_URL
    so = requests.get(a).text
    s = BeautifulSoup(so, 'html.parser')
    current_weather = None
    for r in s.find_all('div', class_="forecast-14-day"):
        current_weather = r.find('td', class_="precip-line").text.strip()

    return temperature, current_weather


# —Ñ–∞–∫—Ç—ã
news_list = ['–ê–ª–µ–∫—Å–µ–π –∏–∑ 8-–í –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –≥–æ–º–æ—Å–µ–∫—Å—É–∞–ª –ª–µ–≥–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
             '–ñ–µ–Ω–∞ - –≥–ª–∞–≤–Ω—ã–π —Å—Ç–∞–ª–∫–µ—Ä –ø–ª–∞–Ω–µ—Ç—ã, –∑–Ω–∞–µ—Ç –¥–∞–∂–µ –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ –≤—ã –∫–∞–∫–∞–µ—Ç–µ']
factweb = "https://xn--80af2bld5d.xn--p1ai/studlife/home/10565/"
getreq = requests.get(factweb).text
bs = BeautifulSoup(getreq, 'html.parser')
facts = bs.find('div', class_="white-box col-margin-bottom padding-box").text.strip()
facts_list = [fact.strip() for fact in facts.split('\n') if fact.strip()]

for fact in facts_list:
    if fact.startswith("–§–∞–∫—Ç ‚Ññ"):
        fact_index = facts_list.index(fact)
        news_list.append(facts_list[fact_index + 1])

conn = sqlite3.connect(config.DATABASE_NAME, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS ships (
                    chat_id INTEGER,
                    user1 TEXT,
                    user2 TEXT
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS events (
                    chat_id INTEGER,
                    event_date TEXT,
                    event_name TEXT
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    chat_id INTEGER,
                    user_id INTEGER,
                    balance INTEGER DEFAULT 0
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS jobs (
                    job_name TEXT,
                    min_payment INTEGER,
                    max_payment INTEGER
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS upgrades (
                    upgrade_name TEXT,
                    cost INTEGER
                )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS user_upgrades (
                    user_id INTEGER,
                    chat_id INTEGER,
                    upgrade_name TEXT,
                    PRIMARY KEY (user_id, chat_id, upgrade_name)
                )''')
cursor.execute('''CREATE TABLE IF NOT EXISTS government (
                    governbalance INTEGER
                )''')
cursor.execute('''CREATE TABLE IF NOT EXISTS casino (
                    casinobalance INTEGER
                )''')
conn.commit()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS message_stats (
        user_id INTEGER,
        chat_id INTEGER,
        message_date TEXT,
        message_count INTEGER DEFAULT 1,
        PRIMARY KEY (user_id, chat_id, message_date)
    )
''')
conn.commit()


def delete_all_ships():
    cursor.execute('DELETE FROM ships')
    conn.commit()


def delete_all_business():
    cursor.execute('DELETE FROM last_income_time')
    conn.commit()


@bot.message_handler(content_types=['new_chat_members'])
def welcome(message):
    for new_user in message.new_chat_members:
        bot.send_message(message.chat.id,
                         f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ 8-–í, {new_user.first_name}"
                         f"!ü•≥ü•Ç*\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø—Ä–æ–ø–∏—à–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ.",
                         parse_mode='Markdown')


def add_ship(chat_id, user1, user2):
    cursor.execute('INSERT INTO ships (chat_id, user1, user2) VALUES (?, ?, ?)', (chat_id, user1, user2))
    conn.commit()


def get_ships(chat_id):
    cursor.execute('SELECT user1, user2 FROM ships WHERE chat_id = ?', (chat_id,))
    return cursor.fetchall()


def add_event(chat_id, event_date, event_name):
    cursor.execute('INSERT INTO events (chat_id, event_date, event_name) VALUES (?, ?, ?)',
                   (chat_id, event_date, event_name))
    conn.commit()


def get_events(chat_id):
    cursor.execute('SELECT event_date, event_name FROM events WHERE chat_id = ?', (chat_id,))
    return cursor.fetchall()


def remove_expired_events(current_date):
    cursor.execute('DELETE FROM ships')
    cursor.execute('DELETE FROM events WHERE event_date < ?', (current_date,))
    conn.commit()


def check_and_notify_events():
    new_cursor = conn.cursor()
    new_cursor.execute('SELECT chat_id, event_name FROM events WHERE event_date = ?', (current_date,))
    events = new_cursor.fetchall()
    for chat_id, event_name in events:
        bot.send_message(chat_id, f"üö® *–í–ù–ò–ú–ê–ù–ò–ï!* –°–ï–ì–û–î–ù–Ø –í–ê–ñ–ù–ê–Ø –î–ê–¢–ê: *{event_name}*", parse_mode='Markdown')
        new_cursor.execute('DELETE FROM events WHERE chat_id = ? AND event_name = ?', (chat_id, event_name))
    conn.commit()
    new_cursor.close()


def init_jobs():
    jobs = [
        ("–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞", 0, 0),
        ("–î–≤–æ—Ä–Ω–∏–∫", 50, 100),
        ("–ü—Ä–æ–¥–∞–≤–µ—Ü", 100, 150),
        ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 200, 300),
        ("–ë–∏–∑–Ω–µ—Å–º–µ–Ω", 350, 999)
    ]

    cursor.executemany('INSERT INTO jobs (job_name, min_payment, max_payment) VALUES (?, ?, ?)', jobs)
    conn.commit()


init_jobs()


@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.lower().strip()

    cursor.execute(
        'SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = "VIP"',
        (user_id, chat_id)
    )

    result = cursor.fetchone()

    is_vip = result is not None

    if text.startswith('start'):
        respond_start(message)
    elif text.startswith('—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ'):
        respond_help(message)
    elif text.startswith('—à–∏–ø'):
        respond_ship(message)
    elif text.startswith('—Å–ø–∏—Å–æ–∫ —à–∏–ø–æ–≤'):
        respond_ships(message)
    elif text.startswith('–ø—É–≥–∞–ª–∫–∞'):
        pugalka(message)
    elif text.startswith('–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞'):
        respond_biology(message)
    elif text.startswith('—Å–æ–±—ã—Ç–∏–µ_—Å–æ–∑–¥–∞—Ç—å'):
        dates(message)
    elif text.startswith('–¥–∞—Ç—ã'):
        showdates(message)
    elif text.startswith('–ø–æ–≥–æ–¥–∞'):
        show_weather(message)
    elif text.startswith('—Å–ø–∏—Å–∞—Ç—å'):
        wiki_search(message)
    elif text.startswith('—Ä–ø'):
        rp_commands(message)
    elif text.startswith('—Ñ–∞–∫—Ç'):
        randomfact(message)
    elif text == '—Ä–∞–±–æ—Ç–∞—Ç—å':
        work(message)
    elif text.startswith('—à–æ–ø'):
        openshop(message)
    elif text.startswith('–∫–æ—à–µ–ª–µ–∫') or text.startswith('–∫–æ—à–µ–ª—ë–∫'):
        stata(message)
    elif text.startswith('–æ–≥—Ä–∞–±–∏—Ç—å'):
        steal_money(message)
    elif text == '–≤–æ—Ä–∫–∞—Ç—å':
        work_command(message)
    elif text.startswith('—Ä—É–ª–µ—Ç–∫–∞'):
        classic_roulette(message)
    elif text.startswith('—Å–∏–≥–Ω–∞—Ç –∫—Ç–æ'):
        signat_who(message)
    elif text.startswith('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏'):
        transfer_money(message)
    elif text.startswith('–∫–∞–∑–Ω–∞'):
        government_addmoney(message)
    elif text.startswith('–∫–∞–∑–∏–Ω—ã—á'):
        casino_addmoney(message)
    elif text.startswith('–±–∞–ª–∞–Ω—Å –∫–∞–∑–Ω—ã'):
        send_gov_balance(message)
    elif text.startswith('–≥—Ä–∞–±–µ–∂ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞'):
        ograbit_gosudarstvo(message)


    if is_vip:
        if text.startswith('–≤–∏–ø–∫–æ–º–∞–Ω–¥–∞ 1'):
            respond_start(message)
        elif text.startswith('–≤–∏–ø–∫–æ–º–∞–Ω–¥–∞ 2'):
            respond_help(message)
        elif text.startswith('–≤–∏–ø–∫–æ–º–∞–Ω–¥–∞ 3'):
            respond_ships(message)
        else:
            pass
    else:
        if text.startswith('–≤–∏–ø') or text.startswith('–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–ø'):
            bot.send_message(chat_id, '–í—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫–æ–π!')

    check_and_notify_events()


def respond_start(message):
    response = "*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!* –Ø –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è 8-–í! –ù–∞–ø–∏—à–∏—Ç–µ *—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ* —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã."
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def respond_help(message):
    response = "*–ö–æ–º–∞–Ω–¥—ã:*\n\n"
    response += "‚Ä¢ *—à–∏–ø @1 @2* ‚Äì –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∏–ø–∞.\n"
    response += "‚Ä¢ *—Å–ø–∏—Å–æ–∫ —à–∏–ø–æ–≤* ‚Äì –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —à–∏–ø—ã.\n"
    response += "‚Ä¢ *–ø—É–≥–∞–ª–∫–∞* ‚Äì –∫–æ–º–Ω–∞—Ç–∞ —Å—Ç—Ä–∞—Ö–∞ –¥–ª—è –°–∏–º—ã.\n"
    response += "‚Ä¢ *–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞* ‚Äì –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.\n"
    response += "‚Ä¢ *—Å–æ–±—ã—Ç–∏–µ_—Å–æ–∑–¥–∞—Ç—å* ‚Äì —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ. –§–æ—Ä–º–∞—Ç: *–¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–µ*\n"
    response += "‚Ä¢ *–¥–∞—Ç—ã* ‚Äì –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.\n"
    response += "‚Ä¢ *–ø–æ–≥–æ–¥–∞* ‚Äì —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞.\n"
    response += "‚Ä¢ *—Å–ø–∏—Å–∞—Ç—å <—Ç–µ–º–∞>* ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ.\n"
    response += "‚Ä¢ *—Ä–ø <–¥–µ–π—Å—Ç–≤–∏–µ> @<user>* ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∞–¥ —é–∑–µ—Ä–æ–º.\n"
    response += "‚Ä¢ *—Ñ–∞–∫—Ç* ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–∏—Ä–µ.\n"
    response += "‚Ä¢ *—Ä–∞–±–æ—Ç–∞—Ç—å* ‚Äì –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–æ–Ω–µ—Ç—ã. –ö–î: 2 —á–∞—Å–∞.\n"
    response += "‚Ä¢ *—à–æ–ø* ‚Äì –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
    response += "‚Ä¢ *–∫–æ—à–µ–ª–µ–∫* ‚Äì –í–∞—à –±–∞–ª–∞–Ω—Å.\n"
    response += "‚Ä¢ *–æ–≥—Ä–∞–±–∏—Ç—å @* ‚Äì –£–∫—Ä–∞—Å—Ç—å –¥–µ–Ω—å–≥–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    response += "‚Ä¢ *—Ä—É–ª–µ—Ç–∫–∞ <—Å—Ç–∞–≤–∫–∞> <—Ü–≤–µ—Ç> - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞*\n"
    response += "‚Ä¢ *–∞–∑–∞—Ä—Ç <—Å—Ç–∞–≤–∫–∞> - –ë–ª—ç–∫–¥–∂–µ–∫*\n"
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def stata(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_nickname = message.from_user.username if message.from_user.username else user_id
    cursor.execute('SELECT upgrade_name FROM user_upgrades WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    results = cursor.fetchall()
    bought_items = ', '.join([item[0] for item in results]) if results else '‚ùå –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤'
    balance = round(get_balance(user_id, chat_id))
    bot.send_message(chat_id, f'*üíé –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_nickname}:*\n'
                              f'üí∞ _–ë–∞–ª–∞–Ω—Å:_ *{balance}*\n\n'
                              f'üõí _–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:_ *{bought_items}*', parse_mode='Markdown')


def respond_ship(message):
    try:
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) < 3:
            bot.reply_to(message, "*ü§° –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: *—à–∏–ø @1 @2*", parse_mode='Markdown')
            return

        user1_username = command_parts[1].replace('@', '').strip()
        user2_username = command_parts[2].replace('@', '').strip()

        if user1_username == user2_username:
            bot.reply_to(message, "*üòè –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —à–∏–ø —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!*", parse_mode='Markdown')
            return
        user1_info = None
        user2_info = None
        for member in bot.get_chat_administrators(message.chat.id):
            if member.user.username == user1_username:
                user1_info = member.user
                user1_username = f"@{user1_username}"
            if member.user.username == user2_username:
                user2_info = member.user
                user2_username = f"@{user2_username}"

        if user1_info is None or user2_info is None:
            bot.reply_to(message,
                         "*ü§° –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –∏—Ö –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É.*",
                         parse_mode='Markdown')
            return
        add_ship(message.chat.id, user1_username, user2_username)
        bot.reply_to(message, f"üíò –®–∏–ø –º–µ–∂–¥—É {user1_info.first_name} –∏ {user2_info.first_name} —Å–æ–∑–¥–∞–Ω!",
                     parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode='Markdown')


def respond_ships(message):
    ships = get_ships(message.chat.id)
    if not ships:
        bot.reply_to(message, "<b>üò¢ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —à–∏–ø–æ–≤.</b>", parse_mode='html')
        return

    response = "<b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∏–ø–æ–≤:</b>\n"
    for user1, user2 in ships:
        response += f"‚Ä¢ {user1} - {user2}\n"

    bot.send_message(message.chat.id, response, parse_mode='html')


def pugalka(message):
    a = random.randint(1, 6)
    media_paths = config.MEDIA_PATHS

    if a in media_paths:
        media_path = media_paths[a]
        if os.path.exists(media_path):
            with open(media_path, 'rb') as media:
                if media_path.endswith(('.jpg', '.jpeg', '.png')):
                    bot.send_photo(message.chat.id, media)

                elif media_path.endswith('.MP4'):
                    bot.send_video(message.chat.id, media)
                else:
                    bot.reply_to(message, "*‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.*", parse_mode='Markdown')
        else:
            bot.reply_to(message, "*‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.*", parse_mode='Markdown')
    else:
        bot.reply_to(message, "*ü§°ü´µ –õ–æ—Ö–∞–º –ø—É–≥–∞–ª–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é!*", parse_mode='Markdown')


def respond_biology(message):
    ocenka = random.randint(2, 5)
    if ocenka == 5:
        otvet = "*–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!* ‚úÖ"
    elif ocenka == 4:
        otvet = "*–ù—É–∂–Ω–æ —á—É—Ç—å-—á—É—Ç—å –ø–æ–¥—Ç—è–Ω—É—Ç—å —É—á–µ–±—É!* ü§èüèª"
    elif ocenka == 3:
        otvet = "*–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –ï–ª–µ–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ —Ä–∞—Å—Å–µ—Ä–¥–∏—Ç—Å—è!* üò±"
    elif ocenka == 2:
        otvet = "*–¢—ã –ú–∏—à–∞? –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...* üôÅ"
    bot.send_dice(message.chat.id, "üé≤")
    time.sleep(4)
    bot.send_message(message.chat.id, f"*üçÄ –í–∞—à–∞ —Å–ª–µ–¥—É—é—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ:* {ocenka}\n\n{otvet}",
                     parse_mode='Markdown')


def dates(message):
    try:
        command_parts = message.text.split(maxsplit=2)
        if len(command_parts) < 3:
            bot.reply_to(message, "*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: *–¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏–µ*", parse_mode='Markdown')
            return

        date = command_parts[1].strip()
        event = command_parts[2].strip()

        add_event(message.chat.id, date, event)
        bot.reply_to(message, f"*üìÖ –°–æ–±—ã—Ç–∏–µ {event} —Å–æ–∑–¥–∞–Ω–æ!*\n\n*–î–∞—Ç–∞:* {date}", parse_mode='Markdown')

    except Exception as e:
        bot.reply_to(message, f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* {e}", parse_mode='Markdown')


def showdates(message):
    remove_expired_events(current_date)
    events = get_events(message.chat.id)
    if not events:
        bot.reply_to(message, "*ü§î –ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.*", parse_mode='Markdown')
        return

    response = "*–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π:*\n"
    for date, event in events:
        response += f"‚Ä¢ {date} - {event}\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown')


def show_weather(message):
    temperature, current_weather = get_weather()
    advice = ""
    if current_weather == '–ö—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å':
        advice = "üí¶ –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –∑–æ–Ω—Ç–∏–∫ –∏ –¥–æ–∂–¥–µ–≤–∏–∫!"
    elif current_weather == '–Ø—Å–Ω–æ':
        advice = "‚òÄÔ∏è –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ!"
    elif current_weather == '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ':
        advice = "‚õÖ –ù–µ–±–æ –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–µ, –Ω–æ –≤ —Ü–µ–ª–æ–º –ø—Ä–∏—è—Ç–Ω–æ!"
    elif current_weather == '–û–±–ª–∞—á–Ω–æ':
        advice = "‚òÅÔ∏è –°–µ–≥–æ–¥–Ω—è –æ–±–ª–∞—á–Ω–æ, –Ω–æ –¥–æ–∂–¥—è –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."

    bot.send_message(message.chat.id, f"*–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:* {temperature}, *{current_weather}* {advice}",
                     parse_mode='Markdown')


def wiki_search(message):
    if not message.text.lower().startswith('—Å–ø–∏—Å–∞—Ç—å'):
        bot.reply_to(message, "*ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ø–∏—Å–∞—Ç—å <–∑–∞–ø—Ä–æ—Å>*", parse_mode='Markdown')
        return
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        bot.reply_to(message, "*üòè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.*", parse_mode='Markdown')
        return

    word = command_parts[1].strip().lower()

    try:
        finalmess = wikipedia.summary(word)
        max_length = 4096
        if len(finalmess) > max_length:
            part1 = finalmess[:max_length].strip()
            part2 = finalmess[max_length:].strip()
            bot.send_message(message.chat.id, part1, parse_mode='html')
            bot.send_message(message.chat.id, part2, parse_mode='html')
        else:
            bot.send_message(message.chat.id, finalmess, parse_mode='html')

    except wikipedia.exceptions.PageError:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        bot.send_message(message.chat.id, f"*‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* {e}", parse_mode='Markdown')


def rp_commands(message):
    random_phrase = ['–ê–∞–∞–∞—Ö, –∫–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µü•µ', '–ö–∞–∫ —Ç–∞–∫ –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ?!ü§¨', '–û–æ–æ–π, –¥–∞ —Ç—ã –ø–æ—à–ª—ã–πüîû',
                     '–ö—Ä–∞–∫–µ–Ω —â–∞—Å –∑–∞–±–∞–Ω–∏—Ç —Ç–µ–±—è –∑–∞ —Ç–∞–∫–æ–µ!üî®']
    random_choice = random.choice(random_phrase)
    command_parts = message.text.split(' ', 2)

    if len(command_parts) < 3:
        bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç"
                                          ": /–∫–æ–º–∞–Ω–¥–∞ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return

    action = command_parts[1].strip().lower()
    user = command_parts[2].strip()
    usercall = message.from_user
    usercalled = usercall.username

    if len(action) >= 2:
        last_two = action[-2:]
        action_modified = action[:-2] + '–ª'
        response1 = f"@{usercalled} {action_modified} {user}! \n\n{random_choice}"
        bot.send_message(message.chat.id, response1)


def randomfact(message):
    random_fact = random.choice(news_list)
    bot.send_message(message.chat.id, f"*{random_fact}*", parse_mode='Markdown')


def get_balance(user_id, chat_id):
    cursor.execute('SELECT balance FROM users WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()
    return result[0] if result else 0


def update_balance(user_id, chat_id, amount):
    cursor.execute('SELECT balance FROM users WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()
    if result:
        new_balance = result[0] + amount
        cursor.execute('UPDATE users SET balance = ? WHERE user_id = ? AND chat_id = ?',
                       (new_balance, user_id, chat_id))
    else:
        cursor.execute('INSERT INTO users (chat_id, user_id, balance) VALUES (?, ?, ?)', (chat_id, user_id, amount))
    conn.commit()


def do_job(user_id, chat_id):
    cursor.execute('SELECT job_name, min_payment, max_payment FROM jobs ORDER BY RANDOM() LIMIT 1')
    job = cursor.fetchone()
    payment = random.randint(job[1], job[2])

    cursor.execute(
        'SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞"',
        (user_id, chat_id))
    if cursor.fetchone():
        payment = int(payment * 1.5)

    cursor.execute('SELECT user_id FROM user_upgrades WHERE chat_id = ? AND upgrade_name = "–ë–∏–∑–Ω–µ—Å"', (chat_id,))
    business_owners = cursor.fetchall()

    if business_owners:
        business_profit = int(payment * 0.1)
        for owner in business_owners:
            business_owner_id = owner[0]
            if business_owner_id != user_id:
                update_balance(business_owner_id, chat_id, business_profit)

    if job[0] == "–ü—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞":
        special_message = "üíî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å—Ç—Ä–∏–ø—Ç–∏–∑, –∏ –æ–Ω –≤—ã–¥–≤–æ—Ä–∏–ª –≤–∞—Å –Ω–∞ —É–ª–∏—Ü—É –±–µ–∑ –æ–ø–ª–∞—Ç—ã. üö™üòî"
        bot.send_message(chat_id, special_message)

    return job[0], payment


WORK_DELAY = 4 * 60 * 60


def ensure_last_work_time_column_exists():
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'last_work_time' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN last_work_time REAL')
        conn.commit()


def work_command(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    ensure_last_work_time_column_exists()

    current_time = time.time()

    cursor.execute('SELECT last_work_time FROM users WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()

    if result:
        last_work_time = result[0]
    else:
        last_work_time = None

    if last_work_time and current_time - last_work_time < WORK_DELAY:
        remaining_time = WORK_DELAY - (current_time - last_work_time)
        bot.send_message(chat_id, f"ü¶£ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ —Å–∫–∞–º–∏—Ç—å —á–µ—Ä–µ–∑ {int(remaining_time // 60)} –º–∏–Ω—É—Ç.")
        return

    cursor.execute('UPDATE users SET last_work_time = ? WHERE user_id = ? AND chat_id = ?',
                   (current_time, user_id, chat_id))
    conn.commit()

    min_payment = 400
    max_payment = 750

    payment = random.randint(min_payment, max_payment)

    cursor.execute(
        'SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞"',
        (user_id, chat_id))
    if cursor.fetchone():
        payment = int(payment * 1.5)

    cursor.execute(
        'SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = "VPN"',
        (user_id, chat_id))
    if cursor.fetchone():
        if random.random() == 0.1:
            loss = 5000
            update_balance(user_id, chat_id, -loss)
            update_balance(1548224823, chat_id, 2500)
            update_balance(5515972843, chat_id, 2500)
            bot.send_message(chat_id, f"üö® <i>–í–∞—Å –∑–∞—Å–µ–∫–ª–∏</i> <b>–º—É—Å–æ—Ä–∞</b>, –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å –¥–∞—Ç—å –∏–º <i>–≤–∑—è—Ç–∫—É</i>"
                                      f" —Ä–∞–∑–º–µ—Ä–æ–º <b>5000</b>", parse_mode='html')
        else:
            update_balance(user_id, chat_id, payment)
            bot.send_message(chat_id, f"ü¶£üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <b>{payment}</b> –Ω–∞ —Ç–æ–º, —á—Ç–æ <i>–∑–∞—Å–∫–∞–º–∏–ª–∏"
                                      f"</i> –º–∞–º–æ–Ω—Ç–∞", parse_mode='html')

    else:
        if random.random() < 0.2:
            loss = 5000
            update_balance(user_id, chat_id, -loss)
            update_balance(1548224823, chat_id, 2500)
            update_balance(5515972843, chat_id, 2500)
            bot.send_message(chat_id, f"üö® <i>–í–∞—Å –∑–∞—Å–µ–∫–ª–∏</i> <b>–º—É—Å–æ—Ä–∞</b>, –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å"
                                      f"—å –¥–∞—Ç—å –∏–º <i>–≤–∑—è—Ç–∫—É</i> —Ä–∞–∑–º–µ—Ä–æ–º <b>5000</b>", parse_mode='html')
        else:
            update_balance(user_id, chat_id, payment)
            bot.send_message(chat_id, f"ü¶£üí∏ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <b>{payment}</b> –Ω–∞ —Ç–æ–º, —á—Ç–æ <i>–∑–∞—Å–∫–∞–º–∏–ª–∏<"
                                      f"/i> –º–∞–º–æ–Ω—Ç–∞", parse_mode='html')


cooldowns = {}
cooldowns_steal = {}


def can_work(user_id, chat_id):
    key = (user_id, chat_id)
    last_work_time = cooldowns.get(key)
    current_time = time.time()

    if last_work_time and (current_time - last_work_time) < 7200:
        return False, 7200 - (current_time - last_work_time)

    cooldowns[key] = current_time
    return True, 0


def work(message):
    init_jobs()

    user_id = message.from_user.id
    chat_id = message.chat.id
    can_work_now, time_left = can_work(user_id, chat_id)
    if not can_work_now:
        bot.reply_to(message, f"ü§° –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ!\nüïù –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(time_left // 60)} –º–∏–Ω—É—Ç.")
        return

    job_name, payment = do_job(user_id, chat_id)
    balance = get_balance(user_id, chat_id)

    response = (f"üíé <i>–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–±–æ—Ç—É</i> <b>{job_name}</b><i> –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ </i><b>${int(payment)}"
                f"</b>!\nüí∞<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> <b>$</b>{int(balance + payment)}")
    update_balance(user_id, chat_id, payment)

    cursor.execute("SELECT governbalance FROM government")
    govern_balance = cursor.fetchone()[0]
    new_govern_balance = govern_balance - payment
    cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
    conn.commit()

    bot.send_message(chat_id, response, parse_mode='html')

    if balance >= 50000:
        tax = int(payment * 0.05)
        update_balance(user_id, chat_id, -tax)

        cursor.execute("SELECT governbalance FROM government")
        govern_balance = cursor.fetchone()[0]
        new_govern_balance = govern_balance + tax
        cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
        conn.commit()

        balance = get_balance(user_id, chat_id)
        bot.send_message(chat_id, f'<b>–ù–∞–ª–æ–≥ 2% —É–ø–ª–∞—á–µ–Ω!</b> üí∏\n<i>–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</i> <b>{int(balance)}$</b>',
                         parse_mode='html')

    cursor.execute(
        'SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = "–ú–∞–π–Ω–∏–Ω–≥"',
        (user_id, chat_id))
    if cursor.fetchone():
        random_number = random.randint(1, 50)
        pribyl = random.randint(-3000, 5000)

        if random_number == 1:
            update_balance(user_id, chat_id, -25000)

            cursor.execute("SELECT governbalance FROM government")
            govern_balance = cursor.fetchone()[0]
            new_govern_balance = govern_balance + 25000
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
            conn.commit()

            bot.send_message(chat_id,
                             f"üßØ –£ –≤–∞—Å —Å–≥–æ—Ä–µ–ª–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞!\n\n<i>üí∞ –í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏</i> <b>$15000</b> "
                             f"<i>–Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã</i>\nüí¢ <i>–∞ —Ç–∞–∫ –∂–µ</i> <b>$5000</b> "
                             f"<i>–Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–æ–≤–æ–≥–æ –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—è</i>\nü§´ <i>–∞ —Ç–∞–∫ –∂–µ –¥–∞–ª–∏ –≤–∑—è—Ç–∫–∏ –æ–±—â–µ–π "
                             f"—Å—É–º–º–æ–π</i> <b>$5000</b> <i>—Å–æ—Å–µ–¥—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –Ω–∞—Å—Ç—É—á–∞–ª–∏ –Ω–∞ –≤–∞—Å "
                             f"–≤ –Ø–Ω—Ç–∞—Ä—å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç.</i>\n\nüî• <b>–ò—Ç–æ–≥–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ $25000</b>",
                             parse_mode='html')

        elif random_number in range(2, 11):
            update_balance(user_id, chat_id, pribyl - 250)

            cursor.execute("SELECT governbalance FROM government")
            govern_balance = cursor.fetchone()[0]
            new_govern_balance = govern_balance + 250
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
            conn.commit()

            bot.send_message(chat_id,
                             f'üîç <b>–ë–¥–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–∂–¥–∞–Ω–µ</b> <i>–∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –º–∞–π–Ω–∏—Ç–µ, –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å</i> '
                             f'<b>–∫—É–ø–∏—Ç—å –∏–º —à–æ–∫–æ–ª–∞–¥–∫—É –∑–∞ $250</b>\n\nüíµ <i>–ù–æ –∑–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞ –≤–∞—à —Ä–∏–≥ –º–∞–π–Ω–∏–ª,</i> '
                             f'<b>–≤–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {pribyl}$</b> <i>(–±–µ–∑ —É—á—ë—Ç–∞ -250$)</i>',
                             parse_mode='html')

        elif random_number in range(12, 14):
            update_balance(user_id, chat_id, pribyl - 2000)

            cursor.execute("SELECT governbalance FROM government")
            govern_balance = cursor.fetchone()[0]
            new_govern_balance = govern_balance + 2000
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
            conn.commit()

            bot.send_message(chat_id,
                             f'‚ö°ü´∞<b> –Ø–Ω—Ç–∞—Ä—å–≠–Ω–µ—Ä–≥–æ–°–±—ã—Ç —Å–ø–∞–ª–∏–ª –≤–∞—à—É –∫–æ–Ω—Ç–æ—Ä—É</b>, <i>–∏ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å</i> '
                             f'<b>2000$</b><i> –Ω–∞ —Ä–µ–º–æ–Ω—Ç —à—Ç–æ—Ä –≤ –∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–∏.</i>\n\n<b>üíµ –í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ {pribyl - 2000}$.</b>',
                             parse_mode='html')

        elif random_number == 15:
            update_balance(user_id, chat_id, pribyl - 1000)

            cursor.execute("SELECT governbalance FROM government")
            govern_balance = cursor.fetchone()[0]
            new_govern_balance = govern_balance + 1000
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))
            conn.commit()

            bot.send_message(chat_id, f'<b>üìâ –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –æ–±–≤–∞–ª–∏–ª—Å—è, —Ç—ã –ø–æ—Ç–µ—Ä—è–ª $1000</b>', parse_mode='html')

        else:
            update_balance(user_id, chat_id, pribyl)
            bot.send_message(chat_id, f'<b>üí∏ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ {pribyl}$ –±–ª–∞–≥–æ–¥–∞—Ä—è –º–∞–π–Ω–∏–Ω–≥—É!</b>',
                             parse_mode='html')

def check_balance(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username

    balance = get_balance(user_id, chat_id)
    response = f"@{username}\n\n<i>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å üëõ:</i> <b>{int(balance)}</b> <i>–º–æ–Ω–µ—Ç.</i>"
    bot.send_message(chat_id, response, parse_mode='html')


def init_upgrades():
    upgrades = [
        ("–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞", 500),
        ("–ë–∏–∑–Ω–µ—Å", 2000),
        ("VPN", 1100),
        ("–ú–∞–π–Ω–∏–Ω–≥", 1400),
        ("VIP", 15000)
    ]

    cursor.executemany('INSERT INTO upgrades (upgrade_name, cost) VALUES (?, ?)', upgrades)
    conn.commit()


init_upgrades()


def buy_upgrade(user_id, chat_id, upgrade_name):
    cursor.execute('SELECT cost FROM upgrades WHERE upgrade_name = ?', (upgrade_name,))
    cost = cursor.fetchone()

    if cost:
        balance = get_balance(user_id, chat_id)
        if balance >= cost[0]:
            cursor.execute('SELECT * FROM user_upgrades WHERE user_id = ? AND chat_id = ? AND upgrade_name = ?',
                           (user_id, chat_id, upgrade_name))
            if cursor.fetchone():
                return "–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ."

            update_balance(user_id, chat_id, -cost[0])

            cursor.execute("SELECT governbalance FROM government")
            govern_balance = cursor.fetchone()[0]
            new_govern_balance = govern_balance + cost[0]
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_govern_balance,))

            cursor.execute('INSERT INTO user_upgrades (user_id, chat_id, upgrade_name) VALUES (?, ?, ?)',
                           (user_id, chat_id, upgrade_name))
            conn.commit()

            response = (f"‚úîÔ∏è <i>–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ</i> <b>{upgrade_name}</b> "
                        f"<i>–∑–∞</i> <b>{cost[0]}</b> <i>–º–æ–Ω–µ—Ç!</i>\n\n"
                        f"üíµ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance - cost[0]} –º–æ–Ω–µ—Ç.</b>\n"
                        f"üí∞ <b>–ö–∞–∑–Ω–∞ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ–ø–æ–ª–Ω–∏–ª–∞—Å—å –Ω–∞ {cost[0]} –º–æ–Ω–µ—Ç.</b>")
        else:
            response = "ü§° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è."
    else:
        response = "‚ùå –£–ª—É—á—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    return response

def openshop(message):
    user_id = message.from_user.id
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("üìà –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ - 500 –º–æ–Ω–µ—Ç", callback_data=f"buy_upgrade_accelerator_{user_id}")
    item2 = InlineKeyboardButton("üíé –ë–∏–∑–Ω–µ—Å - 2000 –º–æ–Ω–µ—Ç", callback_data=f"buy_upgrade_business_{user_id}")
    item3 = InlineKeyboardButton("üòç VPN - 1100 –º–æ–Ω–µ—Ç", callback_data=f"buy_upgrade_vpn_{user_id}")
    item4 = InlineKeyboardButton("‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥ - 1400 –º–æ–Ω–µ—Ç", callback_data=f"buy_upgrade_mining_{user_id}")
    item5 = InlineKeyboardButton("ü™ô VIP - 15000 –º–æ–Ω–µ—Ç", callback_data=f"buy_upgrade_vip_{user_id}")

    markup.add(item1, item2, item3, item4, item5)

    bot.send_message(message.chat.id, "<b>üõí –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!</b>\n\n<i>üëá–í—ã–±–µ—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ:</i>", reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def callback_buy_item(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    data, original_user_id = call.data.rsplit("_", 1)
    original_user_id = int(original_user_id)
    if user_id != original_user_id:
        return
    if data == "buy_upgrade_accelerator":
        response = buy_upgrade(user_id, chat_id, "–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
    elif data == "buy_upgrade_tool":
        response = buy_upgrade(user_id, chat_id, "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    elif data == "buy_upgrade_business":
        response = buy_upgrade(user_id, chat_id, "–ë–∏–∑–Ω–µ—Å")
    elif data == "buy_upgrade_vpn":
        response = buy_upgrade(user_id, chat_id, "VPN")
    elif data == "buy_upgrade_mining":
        response = buy_upgrade(user_id, chat_id, "–ú–∞–π–Ω–∏–Ω–≥")
    elif data == "buy_upgrade_vip":
        response = buy_upgrade(user_id, chat_id, "VIP")
    else:
        response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä."

    if response == 'ü§° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è.':
        bot.answer_callback_query(call.id, response, show_alert=True)
    elif response == '–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ.':
        bot.answer_callback_query(call.id, response, show_alert=True)
    else:
        bot.send_message(chat_id, response, parse_mode='html')


buy_upgrade(6628758852, -1002108574558, '–£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞')


def can_steal(user_id, chat_id):
    key = (user_id, chat_id)
    last_steal_time = cooldowns_steal.get(key)
    current_time = time.time()

    if last_steal_time and (current_time - last_steal_time) < 3600:
        return False, 3600 - (current_time - last_steal_time)

    cooldowns_steal[key] = current_time
    return True, 0


def steal_money(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    can_steal_now, time_lefts = can_steal(user_id, chat_id)
    if not can_steal_now:
        bot.reply_to(message, f"ü§° –í—ã —É–∂–µ –≤–æ—Ä–æ–≤–∞–ª–∏!üïù –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(time_lefts // 60)} –º–∏–Ω—É—Ç.")
        return

    luck = random.randint(1, 2)
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        bot.reply_to(message, "*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: *–æ–≥—Ä–∞–±–∏—Ç—å @Evgeni*", parse_mode='Markdown')
        return

    target_username = command_parts[1].replace('@', '').strip()
    target_user = None

    try:
        for member in bot.get_chat_administrators(chat_id):
            if member.user.username == target_username:
                target_user = member.user
                break

        if target_user is None:
            bot.reply_to(message, "*‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.*", parse_mode='Markdown')
            return

        target_id = target_user.id
        if user_id == target_id:
            bot.reply_to(message, "*üë∫ –ù–µ–ª—å–∑—è —Å–≤–æ—Ä–æ–≤–∞—Ç—å —É —Å–∞–º–æ–≥–æ —Å–µ–±—è!*", parse_mode='Markdown')
            return

        target_balance = get_balance(target_id, chat_id)
        if target_balance < 500:
            bot.reply_to(message, "*üíó –¢–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ–±–æ–∫—Ä–∞—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∫ —É–≤–∏–¥–µ–ª–∏ –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n\n"
                                  "üíò –í–∞—à–µ —Å–µ—Ä–¥—Ü–µ —Ä–∞—Å—Ç–æ–ø–∏–ª–æ—Å—å –∏ –≤—ã –¥–∞–ª–∏ –µ–º—É 400 –º–æ–Ω–µ—Ç*", parse_mode='Markdown')
            update_balance(user_id, chat_id, -400)
            update_balance(target_id, chat_id, 400)
            return

        if luck == 1:
            stolen_amount = random.randint(50, 400)

            if stolen_amount > target_balance:
                stolen_amount = target_balance

            update_balance(target_id, chat_id, -stolen_amount)
            update_balance(user_id, chat_id, stolen_amount)

            thief_balance = get_balance(user_id, chat_id)
            new_target_balance = get_balance(target_id, chat_id)

            bot.send_message(chat_id, f"üí∏ *{message.from_user.first_name}* —É–∫—Ä–∞–ª —É *{target_user.first_name}* "
                                      f"{int(stolen_amount)} –º–æ–Ω–µ—Ç! –¢–µ–ø–µ—Ä—å —É *{message.from_user.first_name}* "
                                      f"{int(thief_balance)} –º–æ–Ω–µ—Ç, –∞ —É *{target_user.first_name}* "
                                      f"{int(new_target_balance)} –º–æ–Ω–µ—Ç.", parse_mode='Markdown')
        else:
            update_balance(user_id, chat_id, -500)
            bot.send_message(chat_id,
                             "üëÆ –¢–æ–ª—å–∫–æ –≤—ã —Å—É–Ω—É–ª–∏ —Ä—É–∫—É –≤ –∫–∞—Ä–º–∞–Ω,"
                             " –∫–∞–∫ <b>–æ—Ñ–∏—Ü–µ—Ä –ø–æ–ª–∏—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏–ª –Ω–∞ –≤–∞—Å –≤–Ω–∏–º–∞–Ω–∏–µ</b>.\n\n üëü –£–Ω–æ—Å—è –Ω–æ–≥–∏ –≤—ã –≤—ã—Ä–æ–Ω–∏–ª–∏ <b>$500</b>", parse_mode='html')
    except Exception as e:
        bot.reply_to(message, f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:* {e}", parse_mode='Markdown')




def classic_roulette(message):
    colors = {'–∫—Ä–∞—Å–Ω—ã–π': 'üî¥', '—á–µ—Ä–Ω—ã–π': '‚¨õÔ∏è', '–∑–µ–ª–µ–Ω—ã–π': 'üü©'}
    chat_id = message.chat.id
    user_id = message.from_user.id
    command_parts = message.text.split(' ', 2)

    if len(command_parts) < 3:
        bot.reply_to(message, "üé∞ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:* _—Ä—É–ª–µ—Ç–∫–∞ <—Å—Ç–∞–≤–∫–∞> <–∫—Ä–∞—Å–Ω—ã–π, —á–µ—Ä–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π>_", parse_mode='Markdown')
        return

    stavka = command_parts[1].strip().lower()
    chosen_color = command_parts[2].strip().lower()
    balance_player = get_balance(user_id, chat_id)

    if not stavka.isdigit():
        bot.reply_to(message, "‚ö†Ô∏è _–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!_", parse_mode='Markdown')
        return

    stavka = float(stavka)

    if stavka < 10:
        bot.reply_to(message, "‚ö†Ô∏è _–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 10!_", parse_mode='Markdown')
        return

    if stavka > 5000:
        bot.reply_to(message, "‚ö†Ô∏è _–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî 5000!_", parse_mode='Markdown')
        return

    if stavka > balance_player:
        bot.reply_to(message, "‚ùå _–ë–µ–∑ –¥–µ–Ω–µ–≥ –Ω–µ –ø—É—Å–∫–∞–µ–º!_", parse_mode='Markdown')
        return

    if chosen_color not in colors:
        bot.reply_to(message, "‚ö†Ô∏è _–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç: –∫—Ä–∞—Å–Ω—ã–π, —á–µ—Ä–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–π!_", parse_mode='Markdown')
        return

    pierdole = random.randint(1,100)
    if pierdole == 1 or pierdole == 2:
        random_color = '–∑–µ–ª–µ–Ω—ã–π'
    elif pierdole in range(3, 51):
        random_color = '–∫—Ä–∞—Å–Ω—ã–π'
    else:
        random_color = '—á–µ—Ä–Ω—ã–π'

    prev_message = None

    for _ in range(3):
        for color_emoji in colors.values():

            if prev_message:
                bot.delete_message(chat_id, prev_message.message_id)

            sent_message = bot.send_message(chat_id, color_emoji)

            prev_message = sent_message

            time.sleep(1)

    if prev_message:
        bot.delete_message(chat_id, prev_message.message_id)

    bot.send_message(chat_id, f"{colors[random_color]}")

    if random_color == chosen_color:
        winnings = stavka * (10 if random_color == '–∑–µ–ª–µ–Ω—ã–π' else 2)
        update_balance(user_id, chat_id, +winnings)
        cursor.execute("SELECT casinobalance FROM casino")
        result = cursor.fetchone()

        if result:
            current_balance = result[0]
            new_balance = current_balance - winnings
            cursor.execute("UPDATE casino SET casinobalance = ? WHERE rowid = 1", (new_balance,))
        bot.send_message(chat_id, f"üéâ _–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!_ –í—ã–ø–∞–ª {colors[random_color]} \n**–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {winnings} üí∞",
                         parse_mode='Markdown')
    else:
        update_balance(user_id, chat_id, -stavka)

        cursor.execute("SELECT casinobalance FROM casino")
        result = cursor.fetchone()

        if result:
            current_balance = result[0]
            new_balance = current_balance + stavka
            cursor.execute("UPDATE casino SET casinobalance = ? WHERE rowid = 1", (new_balance,))
        bot.send_message(chat_id, f"üòû _–£–≤—ã! –í—ã–ø–∞–ª {colors[random_color]}_\n**–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {stavka} üí∏",
                         parse_mode='Markdown')


def signat_who(message):
    admins = bot.get_chat_administrators(message.chat.id)
    random_admin = random.choice(admins).user

    phrases = [
        "–ó–≤–µ–∑–¥—ã –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ",
        "–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ",
        "–ö–∞–∫ –Ω–∏ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ",
        "–í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ",
        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ",
        "–ü—Ä–µ–¥—á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å,",
        "–í–µ—Ä–æ—è—Ç–Ω–æ, ",
    ]

    emojis = ["‚ú®", "üîÆ", "ü§î", "üòé", "üëÄ", "üåü", "üéØ", "ü§∑‚Äç‚ôÇÔ∏è"]

    random_phrase = random.choice(phrases)
    random_emoji = random.choice(emojis)

    response_text = f"{random_phrase} @{random_admin.username} {message.text[10:]} {random_emoji}"

    bot.send_message(message.chat.id, response_text)


TRANSFER_DELAY = 60 * 60


def ensure_last_transfer_time_column_exists():
    cursor.execute("PRAGMA table_info(users)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'last_transfer_time' not in columns:
        cursor.execute('ALTER TABLE users ADD COLUMN last_transfer_time REAL')
        conn.commit()


def transfer_money(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    ensure_last_transfer_time_column_exists()

    current_time = time.time()

    cursor.execute('SELECT last_transfer_time FROM users WHERE user_id = ? AND chat_id = ?', (user_id, chat_id))
    result = cursor.fetchone()

    if result:
        last_transfer_time = result[0]
    else:
        last_transfer_time = None

    if last_transfer_time and current_time - last_transfer_time < TRANSFER_DELAY:
        remaining_time = TRANSFER_DELAY - (current_time - last_transfer_time)
        bot.send_message(chat_id, f"‚ùå –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ {int(remaining_time // 60)} –º–∏–Ω—É—Ç.")
        return

    command_parts = message.text.split(' ', 2)

    if len(command_parts) < 3:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return

    to_username = command_parts[1].replace('@', '').strip()
    amount = command_parts[2].strip()

    if not amount.isdigit():
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    amount = int(amount)

    if amount <= 0:
        bot.reply_to(message, "‚ùå –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return

    to_user = None
    for admin in bot.get_chat_administrators(chat_id):
        if admin.user.username == to_username:
            to_user = admin.user
            break

    if to_user is None:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{to_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    to_user_id = to_user.id

    balance_sender = get_balance(user_id, chat_id)
    if balance_sender < amount:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    update_balance(user_id, chat_id, -amount)
    update_balance(to_user_id, chat_id, amount)

    cursor.execute('UPDATE users SET last_transfer_time = ? WHERE user_id = ? AND chat_id = ?',
                   (current_time, user_id, chat_id))
    conn.commit()

    bot.send_message(chat_id,
                     f"‚úîÔ∏è @{message.from_user.username} –ø–µ—Ä–µ–≤–µ–ª(–∞) {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{to_username}.")

def government_addmoney(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    command_parts = message.text.split(' ', 1)

    if len(command_parts) < 2:
        cursor.execute("SELECT governbalance FROM government")
        result = cursor.fetchone()
        current_balance = result[0]
        bot.send_message(message.chat.id, f'üè¶ –ë–∞–ª–∞–Ω—Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}$')
        return

    try:
        amount = int(command_parts[1].strip())
    except ValueError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É.")
        return


    if user_id != config.group_preservatident:
        kurwa = random.randint(1,6)
        if kurwa == 1:
            bot.reply_to(message, 'ü§° –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –≥—Ä—É–ø–ø—ã!')
        if kurwa == 2:
            bot.reply_to(message, 'ü§† –ù–∞—Ç–∞–ª—å—è –ú–æ—Ä—Å–∫–∞—è –ø–µ—Ö–æ—Ç–∞')
        if kurwa == 3:
            bot.reply_to(message, 'ü´µ –ê –¢–ï–ü–ï–†–¨ –ü–û–®–ï–õ –ù–ê–•*–ô')
        if kurwa == 4:
            bot.reply_to(message, 'ü§¨ –Ø –©–ê–° –°–Ø–î–£ –ó–ê –†–£–õ–¨ –ê –¢–´ –í–´–õ–ï–¢–ò–®–¨ –û–¢–°–Æ–î–ê')
        if kurwa == 5:
            bot.reply_to(message, 'ü§î –ù—É –∏ –Ω–∞ —á—Ç–æ —Ç—ã –Ω–∞–¥–µ—è–ª—Å—è, –≥–µ–Ω–∏–π?')
        if kurwa == 6:
            bot.reply_to(message, 'üí™ –î–æ—Ö*—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω?')
        return

    cursor.execute("SELECT governbalance FROM government")
    result = cursor.fetchone()

    if result:
        current_balance = result[0]
        if current_balance + amount < 0:
            bot.reply_to(message,
                         f'ü´µ –¢–≤–æ—ë –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –æ–±–∞–Ω–∫—Ä–æ—Ç–∏—Ç—Å—è, –µ—Å–ª–∏ —Ç—ã —Å–Ω–∏–º–µ—à—å —Å—Ç–æ–ª—å–∫–æ –±–∞–±–ª–∞, –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–µ—Ä (–∏–ª–∏ —É —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–±–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∏–∫–∞)!\n\nüíé –ù–∞ —Å—á–µ—Ç—É —É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}')
            return
        elif amount > current_balance:
            bot.reply_to(message, f'ü´µ –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞ –±–æ–º–∂ —É —Ç–µ–±—è –±–∞–±–æ–∫ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!\n\nüíé –ù–∞ —Å—á–µ—Ç—É —É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}')
            return
        else:
            new_balance = current_balance + amount
            cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_balance,))
            update_balance(user_id, chat_id, -amount)
    else:
        new_balance = amount
        cursor.execute("INSERT INTO government (governbalance) VALUES (?)", (new_balance,))

    conn.commit()


    bot.send_message(chat_id, f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç.')

def casino_addmoney(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    command_parts = message.text.split(' ', 1)

    if len(command_parts) < 2:
        cursor.execute("SELECT casinobalance FROM casino")
        result = cursor.fetchone()
        current_balance = result[0]
        bot.reply_to(message, f'üé∞ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω—ã—á–∞: {current_balance}$')
        return

    try:
        amount = int(command_parts[1].strip())
    except ValueError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —á–∏—Å–ª–æ–≤—É—é —Å—É–º–º—É.")
        return

    if user_id != config.casino_owner:
        kurwa = random.randint(1, 5)
        if kurwa == 1:
            bot.reply_to(message, 'ü§° –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–∞–∑–∏–Ω–æ!')
        elif kurwa == 2:
            bot.reply_to(message, 'ü§† –ù–∞—Ç–∞–ª—å—è –ú–æ—Ä—Å–∫–∞—è –ø–µ—Ö–æ—Ç–∞')
        elif kurwa == 3:
            bot.reply_to(message, 'ü´µ –ê –¢–ï–ü–ï–†–¨ –ü–û–®–ï–õ –ù–ê***')
        elif kurwa == 4:
            bot.reply_to(message, 'ü§¨ –Ø –©–ê–° –°–Ø–î–£ –ó–ê –†–£–õ–¨ –ê –¢–´ –í–´–õ–ï–¢–ò–®–¨ –û–¢–°–Æ–î–ê')
        elif kurwa == 5:
            bot.reply_to(message, 'ü§î –ù—É –∏ –Ω–∞ —á—Ç–æ —Ç—ã –Ω–∞–¥–µ—è–ª—Å—è, –≥–µ–Ω–∏–π?')
        return

    cursor.execute("SELECT casinobalance FROM casino")
    result = cursor.fetchone()

    if result:
        current_balance = result[0]
        if amount < 0:
            if abs(amount) > current_balance:
                bot.reply_to(message, f'ü´µ –¢–≤–æ—ë –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –æ–±–∞–Ω–∫—Ä–æ—Ç–∏—Ç—Å—è, –µ—Å–ª–∏ —Ç—ã —Å–Ω–∏–º–µ—à—å —Å—Ç–æ–ª—å–∫–æ –±–∞–±–ª–∞, –∫–æ—Ä—Ä—É–ø—Ü–∏–æ–Ω–µ—Ä!\n\nüíé –ù–∞ —Å—á–µ—Ç—É —É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}')
                return
            elif current_balance + amount < 0:
                bot.reply_to(message, f'ü´µ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.\n\nüíé –ù–∞ —Å—á–µ—Ç—É —É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}')
                return
            else:
                new_balance = current_balance + amount
                cursor.execute("UPDATE casino SET casinobalance = ? WHERE rowid = 1", (new_balance,))
                update_balance(user_id, chat_id, -amount)
        else:
            balance_player = get_balance(user_id, chat_id)
            if amount > balance_player:
                bot.reply_to(message, f'ü´µ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–∏–Ω–æ!\n\nüíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance_player}')
                return
            else:
                new_balance = current_balance + amount
                cursor.execute("UPDATE casino SET casinobalance = ? WHERE rowid = 1", (new_balance,))
                update_balance(user_id, chat_id, -amount)

    else:
        if amount < 0:
            bot.reply_to(message, '‚ùå –ù–µ–ª—å–∑—è —Å–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –ø—É—Å—Ç–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ!')
            return
        else:
            new_balance = amount
            cursor.execute("INSERT INTO casino (casinobalance) VALUES (?)", (new_balance,))
            update_balance(user_id, chat_id, -amount)

    conn.commit()

    bot.send_message(chat_id, f'üé∞‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {amount} –º–æ–Ω–µ—Ç.\n\nüíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ: {new_balance} –º–æ–Ω–µ—Ç.')

def send_gov_balance(message):
    cursor.execute("SELECT governbalance FROM government")
    result = cursor.fetchone()
    current_balance = result[0]
    bot.reply_to(message, f'üè¶ –ë–∞–ª–∞–Ω—Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞: {current_balance}$')

def ograbit_gosudarstvo(message):
    wait_msg = bot.reply_to(message, '‚è≥')

    kurwa = random.randint(1, 3)
    if kurwa == 1:
        cursor.execute("SELECT governbalance from government")
        result = cursor.fetchone()
        current_balance = result[0]

        delim_balans_na_3 = current_balance // 3
        new_bal = current_balance - delim_balans_na_3
        update_balance(message.from_user.id, message.chat.id, + delim_balans_na_3)

        cursor.execute("UPDATE government SET governbalance = ? WHERE rowid = 1", (new_bal,))
        bot.delete_message(message.chat.id, wait_msg.id)
        bot.reply_to(message, f'üí∞ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–≥—Ä–∞–±–∏–ª–∏ –±–∞–Ω–∫ –∏ —Å–ø—ë—Ä–ª–∏ {delim_balans_na_3}$')

    else:
        bot.delete_message(message.chat.id, wait_msg.id)
        update_balance(message.from_user.id, message.chat.id, -50000)
        bot.reply_to(message, 'üö® –í–∞—Å –∑–∞—Å–µ–∫–ª–∏ –º—É—Å–æ—Ä–∞, –∏ –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å –¥–∞—Ç—å –∏–º –≤–∑—è—Ç–∫—É —Ä–∞–∑–º–µ—Ä–æ–º 20.000$')



print('–û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ')
bot.polling(none_stop=True)
